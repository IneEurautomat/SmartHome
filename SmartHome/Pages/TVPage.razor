@page "/tv"
@using SmartHome.Models
@using SmartHome.Patterns.Command.Commands
@using SmartHome.Patterns.Command.Commands.TVCommands
@using SmartHome.Patterns.Strategy
@using SmartHome.Services
@inject DeviceFactory DeviceFactory

<h2>TV Control</h2>

<div class="device-control">
    <div class="current-settings">
        <h3>Current TV Settings</h3>
        <img src="@currentImage" alt="TV-screen" class="mode-image" />
        
    </div>
    <div class="control-buttons">
        <button @onclick='() => ExecuteCommand("TurnOn")'>Turn On</button>
        <button @onclick='() => ExecuteCommand("TurnOff")'>Turn Off</button>
        <button @onclick='() => ExecuteCommand("ChangeChannel")'>Change Channel</button>
        <button @onclick='() => ExecuteCommand("IncreaseVolume")'>Increase Volume</button>
        <button @onclick='() => ExecuteCommand("DecreaseVolume")'>Decrease Volume</button>
        <button @onclick='() => ExecuteCommand("Mute")'>Mute</button>
    </div>
    <div class="mode-selection">
        <h3>Select Mode</h3>
        <select @onchange="OnModeChange">
            <option value="MovieMode">Movie Mode</option>
            <option value="SportMode">Sport Mode</option>
            <option value="NightMode">Night Mode</option>
            <option value="MusicMode">Music Mode</option>
        </select>
    </div>
</div>

@code {
    private TV _tv;
    private RemoteControl<TV> _remoteControl;

    private string currentImage = "images/tv/tv-off.jpg";

    protected override void OnInitialized()
    {
        _tv = (TV)DeviceFactory.CreateDevice("TV");

        _remoteControl = new RemoteControl<TV>();
        _remoteControl.SetCommand("TurnOn", new TurnOnCommand<TV>());
        _remoteControl.SetCommand("TurnOff", new TurnOffCommand<TV>());
        _remoteControl.SetCommand("ChangeChannel", new ChangeChannelCommand(_tv));
        _remoteControl.SetCommand("IncreaseVolume", new IncreaseVolumeCommand(_tv));
        _remoteControl.SetCommand("DecreaseVolume", new DecreaseVolumeCommand(_tv));
        _remoteControl.SetCommand("Mute", new MuteCommand(_tv));

        UpdateStatusImage();
        UpdateModeImage();
    }
    private void ExecuteCommand(string command)
    {
        _remoteControl.ExecuteCommand(command, _tv);
        UpdateStatusImage();
        StateHasChanged();
    }

    private void OnModeChange(ChangeEventArgs e)
    {
        var selectedMode = e.Value?.ToString();
        IVolumeStrategy strategy = selectedMode switch
        {
            "MovieMode" => new MovieMode(),
            "SportMode" => new SportMode(),
            "NightMode" => new NightMode(),
            "MusicMode" => new MusicMode(),
            _ => throw new ArgumentException("Invalid mode")
        };

        _tv.SetVolumeStrategy(strategy);
        UpdateModeImage();
    }

    private void UpdateModeImage()
    {
        var mode = _tv.GetCurrentMode();
        currentImage = mode switch
        {
            "movie" => "images/tv/movie-strategy.png",
            "sport" => "images/tv/sport-strategy.png",
            "night" => "images/tv/night-strategy.png",
            "music" => "images/tv/music-strategy.png",
            _ => "images/tv/tv-off.jpg"
        };
        StateHasChanged();
    }

    private void UpdateStatusImage()
    {
        var status = _tv.GetCurrentStatus();
        currentImage = status switch
        {
            "on" => "images/tv/tv-on.png",
            "off" => "images/tv/tv-off.jpg",
            "changing-channel" => "images/tv/change-channel.gif",
            "increase-volume" => "images/tv/increase-volume.png",
            "decrease-volume" => "images/tv/decrease-volume.png",
            "mute" => "images/tv/mute.png",
            _ => "images/tv/tv-off.jpg"
        };
        StateHasChanged();
    }
}