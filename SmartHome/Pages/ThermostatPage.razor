@page "/thermostat"
@using SmartHome.Services
@using static OutdoorTemperatureService
@inject OutdoorTemperatureService OutdoorTemperatureService

<div>
	<h4>Current Weather</h4>
	@if (outdoorTemperature != null)
	{
		<div>
			<p>Current Outdoor Temperature: @outdoorTemperature.Current.TempC °C</p>
			<p>Condition: @outdoorTemperature.Current.Condition.Text</p>
			<img src="@outdoorTemperature.Current.Condition.Icon" alt="Weather icon">
		</div>
	}
	else
	{
		<p>Loading...</p>
	}
</div>

<div>
	<h4>3-Day Forecast</h4>
	@if (threeDayForecast != null)
	{
		<ul>
			@foreach (var forecast in threeDayForecast)
			{
				<p>@forecast.Date:</p>
				<p>Min Temperature: @forecast.Day.MinTempC °C</p>
				<p>Max Temperature: @forecast.Day.MaxTempC °C</p>
				<p>Condition: @forecast.Day.Condition.Text</p>
				<img src="@forecast.Day.Condition.Icon" alt="Weather icon">
			}
		</ul>
	}
	else
	{
		<p>Loading...</p>
	}
</div>
@code {
	private CurrentWeatherResponse outdoorTemperature;
	private List<ForecastDay> threeDayForecast;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			outdoorTemperature = await OutdoorTemperatureService.GetCurrentWeatherAsync("Ghent");
			var forecastResponse = await OutdoorTemperatureService.Get3DayForecastAsync("Ghent");
			threeDayForecast = forecastResponse.Forecast.ForecastDay;
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}
}
