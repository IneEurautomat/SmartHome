@page "/thermostat"
@using SmartHome.Models
@using SmartHome.Services
@using static OutdoorTemperatureService
@inject OutdoorTemperatureService OutdoorTemperatureService
@inject IndoorThermostat IndoorThermostat

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<!-- Voeg de CSS-stijlen toe -->
<link href="css/style.css" rel="stylesheet">

<div class="container">
    <div class="section">
        <h4>Indoor Temperature</h4>
        <p>@indoorTemperature °C</p>
    </div>
    <div class="section">
        <h4>Set Location</h4>
        <div class="location-input">
            <input @bind="location" placeholder="Enter location" />
            <button @onclick="UpdateLocation">Save Location</button>
        </div>
    </div>
    <div class="section">
        <h4>Current Weather</h4>
        @if (outdoorTemperature != null)
        {
            <div>
                <img class="weather-icon" src="@outdoorTemperature.Current.Condition.Icon" alt="Weather icon">
                <p>Current Outdoor Temperature: @outdoorTemperature.Current.TempC °C</p>
                <p>Condition: @outdoorTemperature.Current.Condition.Text</p>
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div class="section">
        <h4>3-Day Forecast</h4>
        @if (threeDayForecast != null)
        {
            <ul>
                @foreach (var forecast in threeDayForecast)
                {
                    var date = DateTime.Parse(forecast.Date);
                    var dayOfTheWeek = date.DayOfWeek;
                    <li>
                        <img class="weather-icon" src="@forecast.Day.Condition.Icon" alt="Weather icon">
                        <div>
                            <p>@dayOfTheWeek</p>
                            <p>@forecast.Date</p>
                            <p>Min Temperature: @forecast.Day.MinTempC °C  </p>
                            <p>Max Temperature: @forecast.Day.MaxTempC °C  </p>
                            <p>  Condition: @forecast.Day.Condition.Text</p>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>

@code {
    private CurrentWeatherResponse outdoorTemperature;
    private double indoorTemperature;
    private List<ForecastDay> threeDayForecast;
    private ThermostatDisplay _thermostatDisplay;
    private string location = "Ghent";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _thermostatDisplay = new ThermostatDisplay(OnTemperatureUpdate);

            // Register the display with the indoor thermostat
            IndoorThermostat.RegisterObserver(_thermostatDisplay);

            // Load initial data
            outdoorTemperature = await OutdoorTemperatureService.GetCurrentWeatherAsync("Ghent");
            indoorTemperature = IndoorThermostat.GetTemperature();

            // Assuming there's a method to register observers for outdoor temperature
            OutdoorTemperatureService.RegisterObserver(_thermostatDisplay);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the location from localStorage
            location = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "location") ?? "Ghent";
            await LoadWeatherData();
        }
    }

    private async Task LoadWeatherData()
    {
        try
        {
            outdoorTemperature = await OutdoorTemperatureService.GetCurrentWeatherAsync(location);
            var forecastResponse = await OutdoorTemperatureService.Get3DayForecastAsync(location);
            threeDayForecast = forecastResponse.Forecast.ForecastDay;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task UpdateLocation()
    {
        try
        {
            // Save location to localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "location", location);
            await LoadWeatherData();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private void OnTemperatureUpdate(double newTemp)
    {
        // Handle the updated temperature here
        indoorTemperature = newTemp;
        StateHasChanged(); // Refresh the UI
    }
}