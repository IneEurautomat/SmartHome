@page "/thermostat"
@using SmartHome.Services
@using static OutdoorTemperatureService
@inject OutdoorTemperatureService OutdoorTemperatureService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div>
	<h4>Current Weather</h4>
	@if (outdoorTemperature != null)
	{
		<div>
			<img src="@outdoorTemperature.Current.Condition.Icon" alt="Weather icon">

			<p>Current Outdoor Temperature: @outdoorTemperature.Current.TempC °C</p>
			<p>Condition: @outdoorTemperature.Current.Condition.Text</p>
		</div>
	}
	else
	{
		<p>Loading...</p>
	}
</div>
<div>
	<h4>Set Location</h4>
	<input @bind="location" placeholder="Enter location" />
	<button @onclick="UpdateLocation">Save Location</button>
</div>
<div>
	<h4>3-Day Forecast</h4>
	@if (threeDayForecast != null)
	{
		<ul>
			@foreach (var forecast in threeDayForecast)
			{
				<p>@forecast.Date:</p>
				<p>Min Temperature: @forecast.Day.MinTempC °C</p>
				<p>Max Temperature: @forecast.Day.MaxTempC °C</p>
				<p>Condition: @forecast.Day.Condition.Text</p>
				<img src="@forecast.Day.Condition.Icon" alt="Weather icon">
			}
		</ul>
	}
	else
	{
		<p>Loading...</p>
	}
</div>
@code {
	private CurrentWeatherResponse outdoorTemperature;
	private List<ForecastDay> threeDayForecast;
	private string location = "Ghent";


	protected override async Task OnInitializedAsync()
	{
		// Initialize default location
		location = "Ghent"; // Default location
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			// Load the location from localStorage
			location = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "location") ?? "Ghent";
			await LoadWeatherData();
		}
	}
	private async Task LoadWeatherData()
	{
		try
		{
			outdoorTemperature = await OutdoorTemperatureService.GetCurrentWeatherAsync(location);
			var forecastResponse = await OutdoorTemperatureService.Get3DayForecastAsync(location);
			threeDayForecast = forecastResponse.Forecast.ForecastDay;
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	private async Task UpdateLocation()
	{
		try
		{
			// Save location to localStorage
			await JSRuntime.InvokeVoidAsync("localStorage.setItem", "location", location);
			await LoadWeatherData();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}
}
